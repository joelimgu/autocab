# Tous les use_sim_time devraient etre a False parce qu'on utilise pas le temps de simulation
amcl:
  ros__parameters:
    use_sim_time: False
# Les alphas sont les plus importants parametres de l'algorithm AMCL
    alpha1: 0.25 # Noise in odometry's rotation estimate from rotational component -> robot tourne donc plus de bruit -> valeur eleve
    alpha2: 0.2  # Noise in odometry's rotation estimate from translational component
    alpha3: 0.15 # Noise in odometry's translation estimate from translational component -> plus ou moins precis donc le plus petit parametre
    alpha4: 0.2  # Noise in odometry's translation estimate from rotational component
    alpha5: 0.2  # Translation-related noise (only use if robot_model_type is Omni)
    base_frame_id: "base_link" #robot base (normally it's base_link)
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: -1.0
    laser_min_range: -1.0
    laser_model_type: "likelihood_field"
    max_beams: 60
    max_particles: 4000  # Normalement le maximum beams du lidar
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.05  # Particle Filter population error
    pf_z: 0.9 # Particle filter population density
    recovery_alpha_fast: 0.1
    recovery_alpha_slow: 0.001
    resample_interval: 1
    robot_model_type: "nav2_amcl::DifferentialMotionModel" # For our car, it's differential. Omni is robots that can rotate itself without moving   #"nav2_amcl::OmniMotionModel"
    save_pose_rate: 0.5
    sigma_hit: 0.2
    tf_broadcast: true # Publier la transformation map -> odom
    transform_tolerance: 1.0
    update_min_a: 0.2  # Rotational movement required before performing a filter update
    update_min_d: 0.2  # Translational movement required before performing a filter update
    z_hit: 0.6
    z_max: 0.005 #
    z_rand: 0.3
    z_short: 0.005 #
    scan_topic: scan # Laser scan topic
    map_topic: map   # Map topic
#    first_map_only: true

amcl_map_client:
  ros__parameters:
    use_sim_time: False

amcl_rclcpp_node:
  ros__parameters:
    use_sim_time: False


bt_navigator:
  ros__parameters:
    use_sim_time: False
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    bt_loop_duration: 10
    default_server_timeout: 20
    enable_groot_monitoring: True
    goal_blackboard_id: goal
    path_blackboard_id: path
    goals_blackboard_id: goals
    groot_zmq_publisher_port: 1666
    groot_zmq_server_port: 1667
    # 'default_nav_through_poses_bt_xml' and 'default_nav_to_pose_bt_xml' are use defaults:
    # nav2_bt_navigator/navigate_to_pose_w_replanning_and_recovery.xml
    # nav2_bt_navigator/navigate_through_poses_w_replanning_and_recovery.xml
    # They can be set here or via a RewrittenYaml remap from a parent launch file to Nav2.
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_compute_path_through_poses_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_distance_traveled_condition_bt_node
    - nav2_single_trigger_bt_node
    - nav2_is_battery_low_condition_bt_node
    - nav2_navigate_through_poses_action_bt_node
    - nav2_navigate_to_pose_action_bt_node
    - nav2_remove_passed_goals_action_bt_node
    - nav2_planner_selector_bt_node
    - nav2_controller_selector_bt_node
    - nav2_goal_checker_selector_bt_node
    - bt_plugin_new_bip_action_node
    - bt_plugin_new_wait_package_node
    #- you can add here your custom nodes

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: False


# Le controller par defaut, mais on utilise regulate pure pursuit parce que notre modele est Ackermann 

#controller_server:
#  ros__parameters:
#    use_sim_time: True
#    controller_frequency: 20.0
#    min_x_velocity_threshold: 0.001
#    min_y_velocity_threshold: 0.5
#    min_theta_velocity_threshold: 0.001
#    failure_tolerance: 0.3
#    progress_checker_plugin: "progress_checker"
#    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
#    controller_plugins: ["FollowPath"]

#    # Progress checker parameters
#    progress_checker:
#      plugin: "nav2_controller::SimpleProgressChecker"
#      required_movement_radius: 0.5
#      movement_time_allowance: 10.0
#    # Goal checker parameters
#    #precise_goal_checker:
#    #  plugin: "nav2_controller::SimpleGoalChecker"
#    #  xy_goal_tolerance: 0.25
#    #  yaw_goal_tolerance: 0.25
#    #  stateful: True
#    general_goal_checker:
#      stateful: True
#      plugin: "nav2_controller::SimpleGoalChecker"
#      xy_goal_tolerance: 0.25
#      yaw_goal_tolerance: 0.25
#    # DWB parameters
#    FollowPath:
#      plugin: "dwb_core::DWBLocalPlanner"
#      debug_trajectory_details: True
#      min_vel_x: 0.0
#      min_vel_y: 0.0
#      max_vel_x: 0.26
#      max_vel_y: 0.0
#      max_vel_theta: 1.0
#      min_speed_xy: 0.0
#      max_speed_xy: 0.26
#      min_speed_theta: 0.0
      # Add high threshold velocity for turtlebot 3 issue.
      # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
#      acc_lim_x: 2.5
#      acc_lim_y: 0.0
#      acc_lim_theta: 3.2
#      decel_lim_x: -2.5
#      decel_lim_y: 0.0
#      decel_lim_theta: -3.2
#      vx_samples: 20
#      vy_samples: 5
#      vtheta_samples: 20
#      sim_time: 1.7
#      linear_granularity: 0.05
#      angular_granularity: 0.025
#      transform_tolerance: 0.2
#      xy_goal_tolerance: 0.25
#      trans_stopped_velocity: 0.25
#      short_circuit_trajectory_evaluation: True
#      stateful: True
#      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
#      BaseObstacle.scale: 0.02
#      PathAlign.scale: 32.0
#      PathAlign.forward_point_distance: 0.1
#      GoalAlign.scale: 24.0
#      GoalAlign.forward_point_distance: 0.1
#      PathDist.scale: 32.0
#      GoalDist.scale: 24.0
#      RotateToGoal.scale: 32.0
#      RotateToGoal.slowing_factor: 5.0
#      RotateToGoal.lookahead_time: -1.0



controller_server:
  ros__parameters:
    use_sim_time: False
    controller_frequency: 20.0 #
    min_x_velocity_threshold: 0.01
    min_y_velocity_threshold: 0.01
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"] # "precise_goal_checker"
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 60.0
    # Goal checker parameters
    precise_goal_checker:
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.1
      yaw_goal_tolerance: 0.25
      stateful: True
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.1
      yaw_goal_tolerance: 0.25
   # Nav2 Regulated Pure Pursuit  parameters
    FollowPath:
      plugin: "nav2_regulated_pure_pursuit_controller::RegulatedPurePursuitController"
      desired_linear_vel: 0.3
      lookahead_dist: 0.6
      min_lookahead_dist: 0.3
      max_lookahead_dist: 2.0
      lookahead_time: 1.51
      transform_tolerance: 0.1
      use_velocity_scaled_lookahead_dist: false
      min_approach_linear_velocity: 0.15
      use_approach_linear_velocity_scaling: true
      approach_velocity_scaling_dist: 1.0
      use_collision_detection: true
      max_allowed_time_to_collision_up_to_carrot: 1.0
      use_regulated_linear_velocity_scaling: true
      use_cost_regulated_linear_velocity_scaling: true
      regulated_linear_scaling_min_radius: 3.0
      regulated_linear_scaling_min_speed: 0.21
      use_rotate_to_heading: false
      allow_reversing: true  #
      max_robot_pose_search_dist: 10.0
      use_interpolation: false
      cost_scaling_dist: 0.1
      cost_scaling_gain: 1.0
      inflation_cost_scaling_factor: 3.0

controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False


global_costmap:
  global_costmap:
    ros__parameters:
      origin_x: -20.0
      origin_y: -20.0
      width: 200
      height: 200
      update_frequency: 1.0
      publish_frequency: 1.0
      map_topic: map
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: False
      track_unknown_space: false
      footprint: "[ [0.525,0.265],[0.525,-0.265],[-0.525,-0.265],[-0.525,0.265] ]"
      rolling_window: false
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
        map_topic: /map
        enabled: True
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 1.0
        inflation_radius: 0.1
      always_send_full_costmap: True
  global_costmap_client:
    ros__parameters:
      use_sim_time: False
  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False


local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 10.0
      publish_frequency: 20.0
      map_topic: map
      global_frame: "odom"
      robot_base_frame: "base_link"
      use_sim_time: False
      rolling_window: true
      width: 3
      height: 3
      resolution: 0.05
      footprint: "[ [0.525,0.265],[0.525,-0.265],[-0.525,-0.265],[-0.525,0.265] ]"
#      plugins: []
      plugins: ["obstacle_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.2
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: "scan"
        scan:
          topic: "/scan"
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
      always_send_full_costmap: True
  local_costmap_client:
    ros__parameters:
      use_sim_time: False
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False



map_server:
  ros__parameters:
    use_sim_time: False
    yaml_filename: "premier.yaml"
    topic_name: "map"
    frame_id: "map"

map_saver:
  ros__parameters:
    use_sim_time: False
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True




planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    use_sim_time: False
    planner_plugins: ["GridBased"]
#    GridBased:
#      plugin: "nav2_navfn_planner/NavfnPlanner"
    GridBased:
      plugin: "nav2_smac_planner/SmacPlannerHybrid"
      tolerance: 0.5                      # tolerance for planning if unable to reach exact pose, in meters
      downsample_costmap: false           # whether or not to downsample the map
      downsampling_factor: 1              # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
      allow_unknown: false                # allow traveling in unknown space
      max_iterations: 1000000             # maximum total iterations to search for before failing (in case unreachable), set to -1 to disable
      max_on_approach_iterations: 1000    # maximum number of iterations to attempt to reach goal once in tolerance
      max_planning_time: 3.5              # max time in s for planner to plan, smooth, and upsample. Will scale maximum smoothing and upsampling times based on remaining time after planning.
      motion_model_for_search: "REEDS_SHEPP"    # For Hybrid Dubin, Redds-Shepp
      cost_travel_multiplier: 2.0         # For 2D: Cost multiplier to apply to search to steer away from high cost areas. Larger values will place in the center of aisles more exactly (if non-`FREE` cost potential field exists) but take slightly longer to compute. To optimize for speed, a value of 1.0 is reasonable. A reasonable tradeoff value is 2.0. A value of 0.0 effective disables steering away from obstacles and acts like a naive binary search A*.
      angle_quantization_bins: 64         # For Hybrid nodes: Number of angle bins for search, must be 1 for 2D node (no angle search)
      analytic_expansion_ratio: 3.5       # For Hybrid/Lattice nodes: The ratio to attempt analytic expansions during search for final approach.
      analytic_expansion_max_length: 3.0    # For Hybrid/Lattice nodes: The maximum length of the analytic expansion to be considered valid to prevent unsafe shortcutting (in meters). This should be scaled with minimum turning radius and be no less than 4-5x the minimum radius
      minimum_turning_radius: 3.0        # For Hybrid/Lattice nodes: minimum turning radius in m of path / vehicle
      reverse_penalty: 5.0                # For Reeds-Shepp model: penalty to apply if motion is reversing, must be => 1
      change_penalty: 10.0                 # For Hybrid nodes: penalty to apply if motion is changing directions, must be >= 0
      non_straight_penalty: 1.20          # For Hybrid nodes: penalty to apply if motion is non-straight, must be => 1
      cost_penalty: 2.0                   # For Hybrid nodes: penalty to apply to higher cost areas when adding into the obstacle map dynamic programming distance expansion heuristic. This drives the robot more towards the center of passages. A value between 1.3 - 3.5 is reasonable.
      retrospective_penalty: 0.025        # For Hybrid/Lattice nodes: penalty to prefer later maneuvers before earlier along the path. Saves search time since earlier nodes are not expanded until it is necessary. Must be >= 0.0 and <= 1.0
      rotation_penalty: 5.0               # For Lattice node: Penalty to apply only to pure rotate in place commands when using minimum control sets containing rotate in place primitives. This should always be set sufficiently high to weight against this action unless strictly necessary for obstacle avoidance or there may be frequent discontinuities in the plan where it requests the robot to rotate in place to short-cut an otherwise smooth path for marginal path distance savings.
      lookup_table_size: 20.0               # For Hybrid nodes: Size of the dubin/reeds-sheep distance window to cache, in meters.
      cache_obstacle_heuristic: True      # For Hybrid nodes: Cache the obstacle map dynamic programming distance expansion heuristic between subsiquent replannings of the same goal location. Dramatically speeds up replanning performance (40x) if costmap is largely static.  
      allow_reverse_expansion: False      # For Lattice nodes: Whether to expand state lattice graph in forward primitives or reverse as well, will double the branching factor at each step.   
      smooth_path: True                   # For Lattice/Hybrid nodes: Whether or not to smooth the path, always true for 2D nodes.
      smoother:
        max_iterations: 1000
        w_smooth: 0.3
        w_data: 0.2
        tolerance: 1e-10
        do_refinement: true               # Whether to recursively run the smoother 3 times on the results from prior runs to refine the results further      allow_unknown: true
planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

recoveries_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    recovery_plugins: ["spin", "backup", "wait"]
    spin:
      plugin: "nav2_recoveries/Spin"
    backup:
      plugin: "nav2_recoveries/BackUp"
    wait:
      plugin: "nav2_recoveries/Wait"
    global_frame: "odom"
    robot_base_frame: "base_link"
    transform_timeout: 0.1
    use_sim_time: False
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: False

waypoint_follower:
  ros__parameters:
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200
